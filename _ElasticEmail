#compdef ElasticEmail

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! openapi-generator (https://openapi-generator.tech)
# ! FROM OPENAPI SPECIFICATION IN JSON.
# !
# ! Based on: https://github.com/Valodim/zsh-curl-completion/blob/master/_curl
# !
# !
# !
# ! Installation:
# !
# ! Copy the _ElasticEmail file to any directory under FPATH
# ! environment variable (echo $FPATH)
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


local curcontext="$curcontext" state line ret=1
typeset -A opt_args

typeset -A mime_type_abbreviations
# text/*
mime_type_abbreviations[text]="text/plain"
mime_type_abbreviations[html]="text/html"
mime_type_abbreviations[md]="text/x-markdown"
mime_type_abbreviations[csv]="text/csv"
mime_type_abbreviations[css]="text/css"
mime_type_abbreviations[rtf]="text/rtf"
# application/*
mime_type_abbreviations[json]="application/json"
mime_type_abbreviations[xml]="application/xml"
mime_type_abbreviations[yaml]="application/yaml"
mime_type_abbreviations[js]="application/javascript"
mime_type_abbreviations[bin]="application/octet-stream"
mime_type_abbreviations[rdf]="application/rdf+xml"
# image/*
mime_type_abbreviations[jpg]="image/jpeg"
mime_type_abbreviations[png]="image/png"
mime_type_abbreviations[gif]="image/gif"
mime_type_abbreviations[bmp]="image/bmp"
mime_type_abbreviations[tiff]="image/tiff"

#
# Generate zsh completion string list for abbreviated mime types
#
get_mime_type_completions() {
    typeset -a result
    result=()
    for k in "${(@k)mime_type_abbreviations}"; do
        value=$mime_type_abbreviations[${k}]
        #echo $value
        result+=( "${k}[${value}]" )
        #echo $result
    done
    echo "$result"
}

#
# cURL crypto engines completion function
#
_curl_crypto_engine() {
    local vals
    vals=( ${${(f)"$(curl --engine list)":gs/ /}[2,$]} )
    _describe -t outputs 'engines' vals && return 0
}

#
# cURL post data completion functions=
#
_curl_post_data() {

    # don't do anything further if this is raw content
    compset -P '=' && _message 'raw content' && return 0

    # complete filename or stdin for @ syntax
    compset -P '*@' && {
        local expl
        _description files expl stdin
        compadd "$expl[@]" - "-"
        _files
        return 0
    }

    # got a name already? expecting data.
    compset -P '*=' && _message 'data value' && return 0

    # otherwise, name (or @ or =) should be specified
    _message 'data name' && return 0

}


local arg_http arg_ftp arg_other arg_proxy arg_crypto arg_connection arg_auth arg_input arg_output

# HTTP Arguments
arg_http=(''\
  {-0,--http1.0}'[force use of use http 1.0 instead of 1.1]' \
  {-b,--cookie}'[pass data to http server as cookie]:data or file' \
  {-c,--cookie-jar}'[specify cookie file]:file name:_files' \
  {-d,--data}'[send specified data as HTTP POST data]:data:{_curl_post_data}' \
  '--data-binary[post HTTP POST data without any processing]:data:{_curl_post_data}' \
  '--data-urlencode[post HTTP POST data, with url encoding]:data:{_curl_post_data}' \
  {-f,--fail}'[enable failfast behavior for server errors]' \
  '*'{-F,--form}'[add POST form data]:name=content' \
  {-G,--get}'[use HTTP GET even with data (-d, --data, --data-binary)]' \
  '*'{-H,--header}'[specify an extra header]:header' \
  '--ignore-content-length[ignore Content-Length header]' \
  {-i,--include}'[include HTTP header in the output]' \
  {-j,--junk-session-cookies}'[discard all session cookies]' \
  {-e,--referer}'[send url as referer]:referer url:_urls' \
  {-L,--location}'[follow Location headers on http 3XX response]' \
  '--location-trusted[like --location, but allows sending of auth data to redirected hosts]' \
  '--max-redirs[set maximum number of redirection followings allowed]:number' \
  {-J,--remote-header-name}'[use Content-Disposition for output file name]' \
  {-O,--remote-name}'[write to filename parsed from url instead of stdout]' \
  '--post301[do not convert POST to GET after following 301 Location response (follow RFC 2616/10.3.2)]' \
  '--post302[do not convert POST to GET after following 302 Location response (follow RFC 2616/10.3.2)]' \
  )

# FTP arguments
arg_ftp=(\
  {-a,--append}'[append to target file instead of overwriting (FTP/SFTP)]' \
  '--crlf[convert LF to CRLF in upload]' \
  '--disable-eprt[disable use of EPRT and LPRT for active FTP transfers]' \
  '--disable-epsv[disable use of EPSV for passive FTP transfers]' \
  '--ftp-account[account data (FTP)]:data' \
  '--ftp-alternative-to-user[command to send when USER and PASS commands fail (FTP)]:command' \
  '--ftp-create-dirs[create paths remotely if it does not exist]' \
  '--ftp-method[ftp method to use to reach a file (FTP)]:method:(multicwd ocwd singlecwd)' \
  '--ftp-pasv[use passive mode for the data connection (FTP)]' \
  '--ftp-skip-pasv-ip[do not use the ip the server suggests for PASV]' \
  '--form-string[like --form, but do not parse content]:name=string' \
  '--ftp-pret[send PRET before PASV]' \
  '--ftp-ssl-ccc[use clear command channel (CCC) after authentication (FTP)]' \
  '--ftp-ssl-ccc-mode[sets the CCC mode (FTP)]:mode:(active passive)' \
  '--ftp-ssl-control[require SSL/TLS for FTP login, clear for transfer]' \
  {-l,--list-only}'[list names only when listing directories (FTP)]' \
  {-P,--ftp-port}'[use active mode, tell server to connect to specified address or interface (FTP]:address' \
  '*'{-Q,--quote}'[send arbitrary command to the remote server before transfer (FTP/SFTP)]:command' \
  )

# Other Protocol arguments
arg_other=(\
  '--mail-from[specify From: address]:address' \
  '--mail-rcpt[specify email recipient for SMTP, may be given multiple times]:address' \
  {-t,--telnet-option}'[pass options to telnet protocol]:opt=val' \
  '--tftp-blksize[set tftp BLKSIZE option]:value' \
  )

# Proxy arguments
arg_proxy=(\
  '--noproxy[list of hosts to connect directly to instead of through proxy]:no-proxy-list' \
  {-p,--proxytunnel}'[tunnel non-http protocols through http proxy]' \
  {-U,--proxy-user}'[specify the user name and password to use for proxy authentication]:user:password' \
  '--proxy-anyauth[use any authentication method for proxy, default to most secure]' \
  '--proxy-basic[use HTTP Basic authentication for proxy]' \
  '--proxy-digest[use http digest authentication for proxy]' \
  '--proxy-negotiate[enable GSS-Negotiate authentication for proxy]' \
  '--proxy-ntlm[enable ntlm authentication for proxy]' \
  '--proxy1.0[use http 1.0 proxy]:proxy url' \
  {-x,--proxy}'[use specified proxy]:proxy url' \
  '--socks5-gssapi-service[change service name for socks server]:servicename' \
  '--socks5-gssapi-nec[allow unprotected exchange of protection mode negotiation]' \
  )

# Crypto arguments
arg_crypto=(\
  {-1,--tlsv1}'[Forces curl to use TLS version 1 when negotiating with a remote TLS server.]' \
  {-2,--sslv2}'[Forces curl to use SSL version 2 when negotiating with a remote SSL server.]' \
  {-3,--sslv3}'[Forces curl to use SSL version 3 when negotiating with a remote SSL server.]' \
  '--ciphers[specifies which cipher to use for the ssl connection]:list of ciphers' \
  '--crlfile[specify file with revoked certificates]:file' \
  '--delegation[set delegation policy to use with GSS/kerberos]:delegation policy:(none policy always)' \
  {-E,--cert}'[use specified client certificate]:certificate file:_files' \
  '--engine[use selected OpenSSL crypto engine]:ssl crypto engine:{_curl_crypto_engine}' \
  '--egd-file[set ssl entropy gathering daemon socket]:entropy socket:_files' \
  '--cert-type[specify certificate type (PEM, DER, ENG)]:certificate type:(PEM DER ENG)' \
  '--cacert[specify certificate file to verify the peer with]:CA certificate:_files' \
  '--capath[specify a search path for certificate files]:CA certificate directory:_directories' \
  '--hostpubmd5[check remote hosts public key]:md5 hash' \
  {-k,--insecure}'[allow ssl to perform insecure ssl connections (ie, ignore certificate)]' \
  '--key[ssl/ssh private key file name]:key file:_files' \
  '--key-type[ssl/ssh private key file type]:file type:(PEM DER ENG)' \
  '--pubkey[ssh public key file]:pubkey file:_files' \
  '--random-file[set source of random data for ssl]:random source:_files' \
  '--no-sessionid[disable caching of ssl session ids]' \
  '--pass:phrase[passphrase for ssl/ssh private key]' \
  '--ssl[try to use ssl/tls for connection, if available]' \
  '--ssl-reqd[try to use ssl/tls for connection, fail if unavailable]' \
  '--tlsauthtype[set TLS authentication type (only SRP supported!)]:authtype' \
  '--tlsuser[set username for TLS authentication]:user' \
  '--tlspassword[set password for TLS authentication]:password' \
  )

# Connection arguments
arg_connection=(\
  {-4,--ipv4}'[prefer ipv4]' \
  {-6,--ipv6}'[prefer ipv6, if available]' \
  {-B,--use-ascii}'[use ascii mode]' \
  '--compressed[request a compressed transfer]' \
  '--connect-timeout[timeout for connection phase]:seconds' \
  {-I,--head}'[fetch http HEAD only (HTTP/FTP/FILE]' \
  '--interface[work on a specific interface]:name' \
  '--keepalive-time[set time to wait before sending keepalive probes]:seconds' \
  '--limit-rate[specify maximum transfer rate]:speed' \
  '--local-port[set preferred number or range of local ports to use]:num' \
  {-N,--no-buffer}'[disable buffering of the output stream]' \
  '--no-keepalive[disable use of keepalive messages in TCP connections]' \
  '--raw[disable all http decoding and pass raw data]' \
  '--resolve[provide a custom address for a specific host and port pair]:host\:port\:address' \
  '--retry[specify maximum number of retries for transient errors]:num' \
  '--retry-delay[specify delay between retries]:seconds' \
  '--retry-max-time[maximum time to spend on retries]:seconds' \
  '--tcp-nodelay[turn on TCP_NODELAY option]' \
  {-y,--speed-time}'[specify time to abort after if download is slower than speed-limit]:time' \
  {-Y,--speed-limit}'[specify minimum speed for --speed-time]:speed' \
  )

# Authentication arguments
arg_auth=(\
  '--anyauth[use any authentication method, default to most secure]' \
  '--basic[use HTTP Basic authentication]' \
  '--ntlm[enable ntlm authentication]' \
  '--digest[use http digest authentication]' \
  '--krb[use kerberos authentication]:auth:(clear safe confidential private)' \
  '--negotiate[enable GSS-Negotiate authentication]' \
  {-n,--netrc}'[scan ~/.netrc for login data]' \
  '--netrc-optional[like --netrc, but does not make .netrc usage mandatory]' \
  '--netrc-file[like --netrc, but specify file to use]:netrc file:_files' \
  '--tr-encoding[request compressed transfer-encoding]' \
  {-u,--user}'[specify user name and password for server authentication]:user\:password' \
  )

# Input arguments
arg_input=(\
  {-C,--continue-at}'[resume at offset ]:offset' \
  {-g,--globoff}'[do not glob {}\[\] letters]' \
  '--max-filesize[maximum filesize to download, fail for bigger files]:bytes' \
  '--proto[specify allowed protocols for transfer]:protocols' \
  '--proto-redir[specify allowed protocols for transfer after a redirect]:protocols' \
  {-r,--range}'[set range of bytes to request (HTTP/FTP/SFTP/FILE)]:range' \
  {-R,--remote-time}'[use timestamp of remote file for local file]' \
  {-T,--upload-file}'[transfer file to remote url (using PUT for HTTP)]:file to upload:_files' \
  '--url[specify a URL to fetch (multi)]:url:_urls' \
  {-z,--time-cond}'[request downloaded file to be newer than date or given reference file]:date expression' \
  )

# Output arguments
arg_output=(\
  '--create-dirs[create local directory hierarchy as needed]' \
  {-D,--dump-header}'[write protocol headers to file]:dump file:_files' \
  {-o,--output}'[write to specified file instead of stdout]:output file:_files' \
  {--progress-bar,-\#}'[display progress as a simple progress bar]' \
  {-\#,--progress-bar}'[Make curl display progress as a simple progress bar instead of the standard, more informational, meter.]' \
  {-R,--remote-time}'[use timestamp of remote file for local file]' \
  '--raw[disable all http decoding and pass raw data]' \
  {-s,--silent}'[silent mode, do not show progress meter or error messages]' \
  {-S,--show-error}'[show errors in silent mode]' \
  '--stderr[redirect stderr to specified file]:output file:_files' \
  '--trace[enable full trace dump of all incoming and outgoing data]:trace file:_files' \
  '--trace-ascii[enable full trace dump of all incoming and outgoing data, without hex data]:trace file:_files' \
  '--trace-time[prepends a time stamp to each trace or verbose line that curl displays]' \
  {-v,--verbose}'[output debug info]' \
  {-w,--write-out}'[specify message to output on successful operation]:format string' \
  '--xattr[store some file metadata in extended file attributes]' \
  {-X,--request}'[specifies request method for HTTP server]:method:(GET POST PUT DELETE HEAD OPTIONS TRACE CONNECT PATCH LINK UNLINK)' \
  )

_arguments -C -s $arg_http $arg_ftp $arg_other $arg_crypto $arg_connection $arg_auth $arg_input $arg_output \
  {-M,--manual}'[Print manual]' \
  '*'{-K,--config}'[Use other config file to read arguments from]:config file:_files' \
  '--libcurl[output libcurl code for the operation to file]:output file:_files' \
  {-m,--max-time}'[Limit total time of operation]:seconds' \
  {-s,--silent}'[Silent mode, do not show progress meter or error messages]' \
  {-S,--show-error}'[Show errors in silent mode]' \
  '--stderr[Redirect stderr to specified file]:output file:_files' \
  '-q[Do not read settings from .curlrc (must be first option)]' \
  {-h,--help}'[Print help and list of operations]' \
  {-V,--version}'[Print service API version]' \
  '--about[Print the information about service]' \
  '--host[Specify the host URL]':URL:_urls \
  '--dry-run[Print out the cURL command without executing it]' \
  {-ac,--accept}'[Set the Accept header in the request]: :{_values "Accept mime type" $(get_mime_type_completions)}' \
  {-ct,--content-type}'[Set the Content-type header in request]: :{_values "Content mime type" $(get_mime_type_completions)}' \
  '1: :->ops' \
  '*:: :->args' \
  && ret=0


case $state in
  ops)
    # Operations
    _values "Operations" \
            "campaignsByNameDelete[Delete Campaign]" \
            "campaignsByNameGet[Load Campaign]" \
            "campaignsByNamePut[Update Campaign]" \
            "campaignsGet[Load Campaigns]" \
            "campaignsPost[Add Campaign]"             "contactsByEmailDelete[Delete Contact]" \
            "contactsByEmailGet[Load Contact]" \
            "contactsByEmailHistoryGet[Load History]" \
            "contactsByEmailPut[Update Contact]" \
            "contactsDeletePost[Delete Contacts Bulk]" \
            "contactsExportByIdStatusGet[Check Export Status]" \
            "contactsExportPost[Export Contacts]" \
            "contactsGet[Load Contacts]" \
            "contactsImportPost[Upload Contacts]" \
            "contactsPost[Add Contact]"             "emailsByMsgidViewGet[View Email]" \
            "emailsMergefilePost[Send Bulk Emails CSV]" \
            "emailsPost[Send Bulk Emails]" \
            "emailsTransactionalPost[Send Transactional Email]"             "eventsByTransactionidGet[Load Email Events]" \
            "eventsChannelsByNameExportPost[Export Channel Events]" \
            "eventsChannelsByNameGet[Load Channel Events]" \
            "eventsChannelsExportByIdStatusGet[Check Channel Export Status]" \
            "eventsExportByIdStatusGet[Check Export Status]" \
            "eventsExportPost[Export Events]" \
            "eventsGet[Load Events]"             "filesByNameDelete[Delete File]" \
            "filesByNameGet[Download File]" \
            "filesByNameInfoGet[Load File Details]" \
            "filesGet[List Files]" \
            "filesPost[Upload File]"             "inboundrouteByIdDelete[Delete Route]" \
            "inboundrouteByIdGet[Get Route]" \
            "inboundrouteByIdPut[Update Route]" \
            "inboundrouteGet[Get Routes]" \
            "inboundrouteOrderPut[Update Sorting]" \
            "inboundroutePost[Create Route]"             "listsByNameContactsPost[Add Contacts to List]" \
            "listsByNameContactsRemovePost[Remove Contacts from List]" \
            "listsByNameDelete[Delete List]" \
            "listsByNameGet[Load List]" \
            "listsByNamePut[Update List]" \
            "listsGet[Load Lists]" \
            "listsPost[Add List]"             "securityApikeysByNameDelete[Delete ApiKey]" \
            "securityApikeysByNameGet[Load ApiKey]" \
            "securityApikeysByNamePut[Update ApiKey]" \
            "securityApikeysGet[List ApiKeys]" \
            "securityApikeysPost[Add ApiKey]" \
            "securitySmtpByNameDelete[Delete SMTP Credential]" \
            "securitySmtpByNameGet[Load SMTP Credential]" \
            "securitySmtpByNamePut[Update SMTP Credential]" \
            "securitySmtpGet[List SMTP Credentials]" \
            "securitySmtpPost[Add SMTP Credential]"             "segmentsByNameDelete[Delete Segment]" \
            "segmentsByNameGet[Load Segment]" \
            "segmentsByNamePut[Update Segment]" \
            "segmentsGet[Load Segments]" \
            "segmentsPost[Add Segment]"             "statisticsCampaignsByNameGet[Load Campaign Stats]" \
            "statisticsCampaignsGet[Load Campaigns Stats]" \
            "statisticsChannelsByNameGet[Load Channel Stats]" \
            "statisticsChannelsGet[Load Channels Stats]" \
            "statisticsGet[Load Statistics]"             "subaccountsByEmailCreditsPatch[Add, Subtract Email Credits]" \
            "subaccountsByEmailDelete[Delete SubAccount]" \
            "subaccountsByEmailGet[Load SubAccount]" \
            "subaccountsByEmailSettingsEmailPut[Update SubAccount Email Settings]" \
            "subaccountsGet[Load SubAccounts]" \
            "subaccountsPost[Add SubAccount]"             "suppressionsBouncesGet[Get Bounce List]" \
            "suppressionsBouncesImportPost[Add Bounces Async]" \
            "suppressionsBouncesPost[Add Bounces]" \
            "suppressionsByEmailDelete[Delete Suppression]" \
            "suppressionsByEmailGet[Get Suppression]" \
            "suppressionsComplaintsGet[Get Complaints List]" \
            "suppressionsComplaintsImportPost[Add Complaints Async]" \
            "suppressionsComplaintsPost[Add Complaints]" \
            "suppressionsGet[Get Suppressions]" \
            "suppressionsUnsubscribesGet[Get Unsubscribes List]" \
            "suppressionsUnsubscribesImportPost[Add Unsubscribes Async]" \
            "suppressionsUnsubscribesPost[Add Unsubscribes]"             "templatesByNameDelete[Delete Template]" \
            "templatesByNameGet[Load Template]" \
            "templatesByNamePut[Update Template]" \
            "templatesGet[Load Templates]" \
            "templatesPost[Add Template]"             "verificationsByEmailDelete[Delete Email Verification Result]" \
            "verificationsByEmailGet[Get Email Verification Result]" \
            "verificationsByEmailPost[Verify Email]" \
            "verificationsFilesByIdDelete[Delete File Verification Result]" \
            "verificationsFilesByIdResultDownloadGet[Download File Verification Result]" \
            "verificationsFilesByIdResultGet[Get Detailed File Verification Result]" \
            "verificationsFilesByIdVerificationPost[Start verification]" \
            "verificationsFilesPost[Upload File with Emails]" \
            "verificationsFilesResultGet[Get Files Verification Results]" \
            "verificationsGet[Get Emails Verification Results]" \

    _arguments "(--help)--help[Print information about operation]"

    ret=0
    ;;
  args)
    case $line[1] in
      campaignsByNameDelete)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of Campaign to delete"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      campaignsByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of Campaign to get"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      campaignsByNamePut)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of Campaign to update"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      campaignsGet)
        local -a _op_arguments
        _op_arguments=(
                    "search=:[QUERY] Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule)"
"offset=:[QUERY] How many items should be returned ahead."
"limit=:[QUERY] Maximum number of returned items."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      campaignsPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsByEmailDelete)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Proper email address."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsByEmailGet)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Proper email address."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsByEmailHistoryGet)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Proper email address."
          "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsByEmailPut)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Proper email address."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsDeletePost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsExportByIdStatusGet)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] ID of the exported file"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsExportPost)
        local -a _op_arguments
        _op_arguments=(
                    "fileFormat=:[QUERY] Format of the exported file"
"rule=:[QUERY] Query used for filtering."
"emails=:[QUERY] Comma delimited list of contact emails"
"compressionFormat=:[QUERY] FileResponse compression format. None or Zip."
"fileName=:[QUERY] Name of your file including extension."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsImportPost)
        local -a _op_arguments
        _op_arguments=(
                    "listName=:[QUERY] Name of an existing list to add these contacts to"
"encodingName=:[QUERY] In what encoding the file is uploaded"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      contactsPost)
        local -a _op_arguments
        _op_arguments=(
                    "listnames=:[QUERY] Names of lists to which the uploaded contacts should be added to"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      emailsByMsgidViewGet)
        local -a _op_arguments
        _op_arguments=(
          "msgid=:[PATH] Message identifier"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      emailsMergefilePost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      emailsPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      emailsTransactionalPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      eventsByTransactionidGet)
        local -a _op_arguments
        _op_arguments=(
          "transactionid=:[PATH] ID number of transaction"
          "from=:[QUERY] Starting date for search in YYYY-MM-DDThh:mm:ss format."
"to=:[QUERY] Ending date for search in YYYY-MM-DDThh:mm:ss format."
"orderBy=:[QUERY] "
"limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      eventsChannelsByNameExportPost)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of selected channel."
          "eventTypes=:[QUERY] Types of Events to return"
"from=:[QUERY] Starting date for search in YYYY-MM-DDThh:mm:ss format."
"to=:[QUERY] Ending date for search in YYYY-MM-DDThh:mm:ss format."
"fileFormat=:[QUERY] Format of the exported file"
"compressionFormat=:[QUERY] FileResponse compression format. None or Zip."
"fileName=:[QUERY] Name of your file including extension."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      eventsChannelsByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of selected channel."
          "eventTypes=:[QUERY] Types of Events to return"
"from=:[QUERY] Starting date for search in YYYY-MM-DDThh:mm:ss format."
"to=:[QUERY] Ending date for search in YYYY-MM-DDThh:mm:ss format."
"orderBy=:[QUERY] "
"limit=:[QUERY] How many items to load. Maximum for this request is 1000 items"
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      eventsChannelsExportByIdStatusGet)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] ID of the exported file"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      eventsExportByIdStatusGet)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] ID of the exported file"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      eventsExportPost)
        local -a _op_arguments
        _op_arguments=(
                    "eventTypes=:[QUERY] Types of Events to return"
"from=:[QUERY] Starting date for search in YYYY-MM-DDThh:mm:ss format."
"to=:[QUERY] Ending date for search in YYYY-MM-DDThh:mm:ss format."
"fileFormat=:[QUERY] Format of the exported file"
"compressionFormat=:[QUERY] FileResponse compression format. None or Zip."
"fileName=:[QUERY] Name of your file including extension."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      eventsGet)
        local -a _op_arguments
        _op_arguments=(
                    "eventTypes=:[QUERY] Types of Events to return"
"from=:[QUERY] Starting date for search in YYYY-MM-DDThh:mm:ss format."
"to=:[QUERY] Ending date for search in YYYY-MM-DDThh:mm:ss format."
"orderBy=:[QUERY] "
"limit=:[QUERY] How many items to load. Maximum for this request is 1000 items"
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      filesByNameDelete)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your file including extension."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      filesByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your file including extension."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      filesByNameInfoGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your file including extension."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      filesGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      filesPost)
        local -a _op_arguments
        _op_arguments=(
                    "expiresAfterDays=:[QUERY] After how many days should the file be deleted."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      inboundrouteByIdDelete)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      inboundrouteByIdGet)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] ID number of your attachment"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      inboundrouteByIdPut)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      inboundrouteGet)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      inboundrouteOrderPut)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      inboundroutePost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      listsByNameContactsPost)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your list."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      listsByNameContactsRemovePost)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your list."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      listsByNameDelete)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your list."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      listsByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your list."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      listsByNamePut)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your list."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      listsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      listsPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securityApikeysByNameDelete)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of the ApiKey"
          "subaccount=:[QUERY] Email of the subaccount of which ApiKey should be deleted"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securityApikeysByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of the ApiKey"
          "subaccount=:[QUERY] Email of the subaccount of which ApiKey should be loaded"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securityApikeysByNamePut)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of the ApiKey"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securityApikeysGet)
        local -a _op_arguments
        _op_arguments=(
                    "subaccount=:[QUERY] Email of the subaccount of which ApiKeys should be loaded"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securityApikeysPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securitySmtpByNameDelete)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of the SMTP Credential"
          "subaccount=:[QUERY] Email of the subaccount of which credential should be deleted"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securitySmtpByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of the SMTP Credential"
          "subaccount=:[QUERY] Email of the subaccount of which credential should be loaded"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securitySmtpByNamePut)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of the SMTP Credential"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securitySmtpGet)
        local -a _op_arguments
        _op_arguments=(
                    "subaccount=:[QUERY] Email of the subaccount of which credentials should be listed"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      securitySmtpPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      segmentsByNameDelete)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your segment."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      segmentsByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of the segment you want to load. Will load all contacts if the &#39;All Contacts&#39; name has been provided"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      segmentsByNamePut)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of your segment."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      segmentsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      segmentsPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      statisticsCampaignsByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] The name of the campaign to get."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      statisticsCampaignsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      statisticsChannelsByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] The name of the channel to get."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      statisticsChannelsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      statisticsGet)
        local -a _op_arguments
        _op_arguments=(
                    "from=:[QUERY] Starting date for search in YYYY-MM-DDThh:mm:ss format."
"to=:[QUERY] Ending date for search in YYYY-MM-DDThh:mm:ss format."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      subaccountsByEmailCreditsPatch)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Email address of Sub-Account"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      subaccountsByEmailDelete)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Email address of Sub-Account"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      subaccountsByEmailGet)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Email address of Sub-Account"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      subaccountsByEmailSettingsEmailPut)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      subaccountsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      subaccountsPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsBouncesGet)
        local -a _op_arguments
        _op_arguments=(
                    "search=:[QUERY] Text fragment used for searching."
"limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsBouncesImportPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsBouncesPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsByEmailDelete)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Proper email address."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsByEmailGet)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Proper email address."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsComplaintsGet)
        local -a _op_arguments
        _op_arguments=(
                    "search=:[QUERY] Text fragment used for searching."
"limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsComplaintsImportPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsComplaintsPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsUnsubscribesGet)
        local -a _op_arguments
        _op_arguments=(
                    "search=:[QUERY] Text fragment used for searching."
"limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsUnsubscribesImportPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      suppressionsUnsubscribesPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      templatesByNameDelete)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of template."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      templatesByNameGet)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of template."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      templatesByNamePut)
        local -a _op_arguments
        _op_arguments=(
          "name=:[PATH] Name of template."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      templatesGet)
        local -a _op_arguments
        _op_arguments=(
                    "scopeType=:[QUERY] Return templates with specified scope only"
"templateTypes=:[QUERY] Return templates with specified type only"
"limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      templatesPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsByEmailDelete)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Email address to verification"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsByEmailGet)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Email address to view verification result of"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsByEmailPost)
        local -a _op_arguments
        _op_arguments=(
          "email=:[PATH] Email address to verify"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsFilesByIdDelete)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] ID of the exported file"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsFilesByIdResultDownloadGet)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Verification ID to download"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsFilesByIdResultGet)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] ID of the Verification to display status of"
          "limit=:[QUERY] Maximum number of returned email verification results"
"offset=:[QUERY] How many result items should be returned ahead"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsFilesByIdVerificationPost)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] File ID to start verification"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsFilesPost)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsFilesResultGet)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      verificationsGet)
        local -a _op_arguments
        _op_arguments=(
                    "limit=:[QUERY] Maximum number of returned items."
"offset=:[QUERY] How many items should be returned ahead."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
    esac
    ;;

esac

return ret
